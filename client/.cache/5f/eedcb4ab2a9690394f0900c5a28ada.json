{"id":"node_modules/task/src/after.js","dependencies":[{"name":"/home/erynern/Documents/phase-2/week-2/kanban/client/package.json","includedInParent":true,"mtime":1581612444168},{"name":"/home/erynern/Documents/phase-2/week-2/kanban/client/node_modules/task/package.json","includedInParent":true,"mtime":1581612443204},{"name":"./util/get-fn","loc":{"line":1,"column":22},"parent":"/home/erynern/Documents/phase-2/week-2/kanban/client/node_modules/task/src/after.js","resolved":"/home/erynern/Documents/phase-2/week-2/kanban/client/node_modules/task/src/util/get-fn.js"}],"generated":{"js":"const getFn = require('./util/get-fn')\nconst DONE_COMPUTE = ['done', 'compute']\nconst DONE = ['done']\n\nexports.props = {\n  after: {\n    on (val, stamp, after) {\n      const task = after.parent()\n      const fn = getFn(task)\n      if (fn) {\n        task.set((task, ploy, cwd) => {\n          const aftertasks = after.serialize()\n          const tasks = task.parent()\n          const afterall = (val, stamp, d) => {\n            const alldone = aftertasks.every(key => Array.isArray(key)\n              ? tasks.get(key.concat(DONE_COMPUTE))\n              : tasks.get([key, 'done', 'compute'])\n            )\n            if (alldone) {\n              if (fn) {\n                task.set({ done: false }, false)\n                task.set(fn(task, ploy, cwd), stamp)\n              }\n            }\n          }\n          aftertasks.forEach(key => {\n            const done = Array.isArray(key)\n              ? tasks.get(key.concat(DONE), {})\n              : tasks.get([key, 'done'], {})\n            done.on(afterall, after.path().join('.'))\n            afterall(done.compute(), stamp)\n          })\n        }, stamp)\n      } else {\n        after.root().emit('error', `after used, but no val found! ${after.path()}`)\n      }\n    }\n  }\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/task/src/after.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/task/src/after.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/task/src/after.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/task/src/after.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/task/src/after.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/task/src/after.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/task/src/after.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/task/src/after.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/task/src/after.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/task/src/after.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/task/src/after.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/task/src/after.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/task/src/after.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/task/src/after.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/task/src/after.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/task/src/after.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/task/src/after.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/task/src/after.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/task/src/after.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/task/src/after.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/task/src/after.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/task/src/after.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/task/src/after.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/task/src/after.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/task/src/after.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/task/src/after.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/task/src/after.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/task/src/after.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/task/src/after.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/task/src/after.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/task/src/after.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/task/src/after.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/task/src/after.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/task/src/after.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/task/src/after.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/task/src/after.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/task/src/after.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/task/src/after.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/task/src/after.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/task/src/after.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}}],"sources":{"node_modules/task/src/after.js":"const getFn = require('./util/get-fn')\nconst DONE_COMPUTE = ['done', 'compute']\nconst DONE = ['done']\n\nexports.props = {\n  after: {\n    on (val, stamp, after) {\n      const task = after.parent()\n      const fn = getFn(task)\n      if (fn) {\n        task.set((task, ploy, cwd) => {\n          const aftertasks = after.serialize()\n          const tasks = task.parent()\n          const afterall = (val, stamp, d) => {\n            const alldone = aftertasks.every(key => Array.isArray(key)\n              ? tasks.get(key.concat(DONE_COMPUTE))\n              : tasks.get([key, 'done', 'compute'])\n            )\n            if (alldone) {\n              if (fn) {\n                task.set({ done: false }, false)\n                task.set(fn(task, ploy, cwd), stamp)\n              }\n            }\n          }\n          aftertasks.forEach(key => {\n            const done = Array.isArray(key)\n              ? tasks.get(key.concat(DONE), {})\n              : tasks.get([key, 'done'], {})\n            done.on(afterall, after.path().join('.'))\n            afterall(done.compute(), stamp)\n          })\n        }, stamp)\n      } else {\n        after.root().emit('error', `after used, but no val found! ${after.path()}`)\n      }\n    }\n  }\n}\n"},"lineCount":40}},"error":null,"hash":"8905870bd177e2a85659f12145ad5864","cacheData":{"env":{}}}